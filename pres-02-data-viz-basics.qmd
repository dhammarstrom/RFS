---
title: "[Data visualization in R - The basics]{.yellow}"
subtitle: ""
format:
  revealjs:
    theme: [default, scss/custom-light.scss]
---

## 



```{r}
#| echo: false
#| warning: false
#| message: false

library(tidyverse)

## Create a data frame for plotting a rectangle that is tilted to look like a plane in 3D
parallelogram_data <- data.frame(
  x = rep(c(1, 4, 6, 3), 7),
  y = rep(c(1.5, 1.5, 3, 3), 7),
  col = rep(c("a", "b", "c", "d", "e", "f", "g"), each = 4), 
  add = rep(c(1, 2, 3, 4, 5, 6, 7), each = 4)) %>%
  mutate(y = y + add)

# Plot the parallelogram using ggplot2
ggplot() +
  geom_polygon(data = parallelogram_data, aes(x = x, y = y, fill = col), color = "black", alpha = 0.3) +
  coord_fixed(ratio = 1) +  # This is to ensure that the x and y axis are on the same scale
  geom_text(data = data.frame(y = seq(1:7) + 2, 
                              lab = c("Data", "Aesthetics",
                                      "Geometric objects", "Facets", 
                                      "Statistical\ntransformations", 
                                      "Coordinates", "Theme and\n annotations")), 
            aes(x = 0.5, y = y, label = lab), 
            hjust = 1) +
  
  scale_x_continuous(limits = c(-2, 6)) +

  theme_void() + 
  theme(legend.position = "none")



```

##

```{r}
#| echo: false
#| warning: false
#| message: false

library(cowplot)

a <- data.frame(x = c(1, 2.4, 4, 5.2), 
           y = c(3, 2, 5, 7.8), 
           color = c("s", "m", "s", "m"), 
           shape = c("a", "a", "b", "b"), 
           size = c(2, 3, 4, 5)) %>%
  ggplot(aes(x, y, shape = shape)) + geom_point(size = 3) + 
  theme_void() +
  theme(legend.position = "none")
 
b <- data.frame(x = c(1, 2.4, 4, 5.2), 
           y = c(3, 2, 5, 7.8), 
           color = c("s", "m", "s", "m"), 
           shape = c("a", "a", "b", "b"), 
           size = c(2, 3, 4, 5)) %>%
  ggplot(aes(x, y, shape = shape))  + 
  theme_classic() +
  theme(legend.position = "none", 
        axis.text = element_blank(), 
        axis.title = element_blank())

c <- data.frame(x = c(1, 2.4, 4, 5.2), 
           y = c(3, 2, 5, 7.8), 
           color = c("s", "m", "s", "m"), 
           shape = c("a", "a", "b", "b"), 
           size = c(2, 3, 4, 5)) %>%
  ggplot(aes(x, y, shape = shape))  + 
  theme_classic() +
  geom_point(color = "white") + 
  labs(title = "Title", 
       subtitle = "Subtitle", 
       x = "x-axis", 
       y = "y-axis", 
       shape = "legend") +
  
  theme(axis.ticks = element_blank(), 
        axis.line = element_blank())


d <- data.frame(x = c(1, 2.4, 4, 5.2), 
           y = c(3, 2, 5, 7.8), 
           color = c("s", "m", "s", "m"), 
           shape = c("a", "a", "b", "b"), 
           size = c(2, 3, 4, 5)) %>%
  ggplot(aes(x, y, shape = shape))  + 
  theme_classic() +
  geom_point(color = "black", size = 3) + 
  labs(title = "Title", 
       subtitle = "Subtitle", 
       x = "x-axis", 
       y = "y-axis", 
       shape = "legend") +
  
  theme()


plot_grid(
    plot_grid(a, b, c, nrow = 1, align = "vh", 
              labels = c("a", "b", "c"), 
          rel_widths = c(0.8, 0.8, 1)), 
    plot_grid(NULL, d, NULL, rel_widths = c(0.7, 1, 0.7),
              nrow = 1,
              labels = c("", "d", "")), 
    nrow = 2)

```

## {.smaller .scrollable}



```{r}
#| eval: false
#| echo: true

library(ggplot2)

df <- data.frame(x = c(1, 2.4, 4, 5.2),  # <1> 
           y = c(3, 2, 5, 7.8), 
           shape = c("a", "a", "b", "b")) 


  ggplot(data = df,                      # <2>
         mapping = aes(x = x, y = y, shape = shape))  +    # <3>

  geom_point(color = "black", size = 3) + # <4>
  
    labs(title = "Title",        # <5>
       subtitle = "Subtitle", 
       x = "x-axis", 
       y = "y-axis", 
       shape = "legend") +
    theme_classic() # <6>


```



1.  A simple data frame is saved containing the variables we will plot
2.  The data is explicitly called
3.  Variables are mapped to coordinates (x and y) and shapes.
4.  Geometric objects (points) are specified with color and size determined in the function
5.  Annotations are added to the plot through the `labs` (labels) function.
6.  A pre-built theme is used to change the default appearance of the plot.


## 

```{r}
#| echo: false
#| warning: false
#| message: false
#| fig-width: 6
#| fig-align: center

d <- data.frame(x = c(1, 2.4, 4, 5.2), 
           y = c(3, 2, 5, 7.8), 
           color = c("s", "m", "s", "m"), 
           shape = c("a", "a", "b", "b"), 
           size = c(2, 3, 4, 5)) %>%
  ggplot(aes(x, y, shape = shape))  + 
  theme_classic() +
  geom_point(color = "black", size = 3) + 
  labs(title = "Title", 
       subtitle = "Subtitle", 
       x = "x-axis", 
       y = "y-axis", 
       shape = "legend") +
  
  theme()

d

```









